name: PocketDev Docker Build

on:
  release:
    types: [prereleased, released]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4
        name: Checkout the files

      # Install PHP dependencies
      - name: Install PHP dependencies
        run: |
          cd www
          composer install --optimize-autoloader --no-dev

      # Install Node.js dependencies and build frontend assets
      - name: Install Node.js dependencies and build frontend assets
        run: |
          cd www
          npm ci
          npm run build
          rm -rf node_modules

      # Set up Docker Buildx for caching support
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login to GitHub Container Registry
      - name: Login to container registry
        run: docker login ghcr.io --username=${{ github.actor }} --password=${{ secrets.GITHUB_TOKEN }}

      # Build and push Laravel PHP application image
      - name: Build and push pocket-dev-php image
        run: |
          docker buildx build \
            --file docker-laravel/production/php/Dockerfile \
            --progress plain \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --cache-to=type=registry,ref=ghcr.io/${{ github.repository_owner }}/pocket-dev-php:cache,mode=max \
            --tag ghcr.io/${{ github.repository_owner }}/pocket-dev-php:${{ github.event.release.tag_name }} \
            --tag ghcr.io/${{ github.repository_owner }}/pocket-dev-php:latest \
            --push \
            .

      # Build and push Laravel Nginx image
      - name: Build and push pocket-dev-nginx image
        run: |
          docker buildx build \
            --file docker-laravel/production/nginx/Dockerfile \
            --progress plain \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --cache-to=type=registry,ref=ghcr.io/${{ github.repository_owner }}/pocket-dev-nginx:cache,mode=max \
            --tag ghcr.io/${{ github.repository_owner }}/pocket-dev-nginx:${{ github.event.release.tag_name }} \
            --tag ghcr.io/${{ github.repository_owner }}/pocket-dev-nginx:latest \
            --push \
            .

      # Build and push TTYD terminal image
      - name: Build and push pocket-dev-ttyd image
        run: |
          docker buildx build \
            --file docker-ttyd/shared/Dockerfile \
            --progress plain \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --cache-to=type=registry,ref=ghcr.io/${{ github.repository_owner }}/pocket-dev-ttyd:cache,mode=max \
            --tag ghcr.io/${{ github.repository_owner }}/pocket-dev-ttyd:${{ github.event.release.tag_name }} \
            --tag ghcr.io/${{ github.repository_owner }}/pocket-dev-ttyd:latest \
            --push \
            .

      # Build and push Proxy image
      - name: Build and push pocket-dev-proxy image
        run: |
          docker buildx build \
            --file docker-proxy/shared/Dockerfile \
            --progress plain \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --cache-to=type=registry,ref=ghcr.io/${{ github.repository_owner }}/pocket-dev-proxy:cache,mode=max \
            --tag ghcr.io/${{ github.repository_owner }}/pocket-dev-proxy:${{ github.event.release.tag_name }} \
            --tag ghcr.io/${{ github.repository_owner }}/pocket-dev-proxy:latest \
            --push \
            .

      # Output image information
      - name: Image build complete
        run: |
          echo "âœ… Images built and pushed:"
          echo "ðŸ“¦ ghcr.io/${{ github.repository_owner }}/pocket-dev-php:${{ github.event.release.tag_name }}"
          echo "ðŸ“¦ ghcr.io/${{ github.repository_owner }}/pocket-dev-nginx:${{ github.event.release.tag_name }}"
          echo "ðŸ“¦ ghcr.io/${{ github.repository_owner }}/pocket-dev-ttyd:${{ github.event.release.tag_name }}"
          echo "ðŸ“¦ ghcr.io/${{ github.repository_owner }}/pocket-dev-proxy:${{ github.event.release.tag_name }}"
          echo ""
          echo "ðŸš€ Deploy with: cd deploy && docker-compose up -d"